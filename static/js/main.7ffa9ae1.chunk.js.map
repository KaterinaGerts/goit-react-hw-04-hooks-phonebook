{"version":3,"sources":["components/Container/Container.module.css","hooks/useLocalStorage.js","components/Container/Container.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css"],"names":["module","exports","useLocalStorage","contacts","useState","JSON","parse","window","localStorage","getItem","id","name","number","state","setstate","useEffect","setItem","stringify","Container","children","className","s","container","ContactForm","onSubmit","setName","setNumber","handleChange","e","currentTarget","value","reset","form","preventDefault","label","input","type","onChange","pattern","title","required","button","ContactList","onDeleteContact","contactList","map","onClick","Filter","App","setContacts","filter","setFilter","visibleContacts","normalizedFilter","toLowerCase","contact","includes","getVisibleContacts","data","uuidv4","nameNormalize","find","alert","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ffa9ae1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__2FUX6\"};","import { useState, useEffect } from 'react';\r\n\r\nconst useLocalStorage = contacts => {\r\n  const [state, setstate] = useState(() => {\r\n    return (\r\n      JSON.parse(window.localStorage.getItem('contacts')) ?? [\r\n        { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n        { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n        { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n        { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n      ]\r\n    );\r\n  });\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem('contacts', JSON.stringify(state));\r\n  }, [state]);\r\n\r\n  return [state, setstate];\r\n};\r\n\r\nexport default useLocalStorage;\r\n","import React from 'react';\r\nimport s from './Container.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Container = ({ children }) => (\r\n  <div className={s.container}>{children}</div>\r\n);\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Container;\r\n","import { useState } from 'react';\r\nimport s from './ContactForm.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const ContactForm = ({ onSubmit }) => {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    switch (name) {\r\n      case 'name':\r\n        return setName(value);\r\n      case 'number':\r\n        return setNumber(value);\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    onSubmit({ name, number });\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form className={s.form} onSubmit={handleSubmit}>\r\n      <label className={s.label}>\r\n        Name\r\n        <input\r\n          className={s.input}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          onChange={handleChange}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n        />\r\n      </label>\r\n      <label className={s.label}>\r\n        Number\r\n        <input\r\n          className={s.input}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={number}\r\n          onChange={handleChange}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n        />\r\n      </label>\r\n      <button type=\"submit\" className={s.button}>\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nContactForm.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.number.isRequired,\r\n    }),\r\n  ),\r\n};\r\n\r\n// class ContactForm extends Component {\r\n//   state = {\r\n//     name: '',\r\n//     number: '',\r\n//   };\r\n\r\n//   handleChange = e => {\r\n//     const { name, value } = e.currentTarget;\r\n//     this.setState({ [name]: value });\r\n//   };\r\n\r\n//   handleSubmit =e => {\r\n//     e.preventDefault();\r\n\r\n//     const {name, number} = this.state\r\n\r\n//     this.props.onSubmit({name, number});\r\n//     this.reset();\r\n//   };\r\n\r\n//   reset = () => {\r\n//     this.setState({name: '', number: '',});\r\n//   };\r\n\r\n//   render() {\r\n//     const { name, number } = this.state;\r\n\r\n//     return (\r\n//       <form className={s.form} onSubmit={this.handleSubmit}>\r\n//         <label className={s.label}>\r\n//           Name\r\n//           <input\r\n//             className={s.input}\r\n//             type=\"text\"\r\n//             name=\"name\"\r\n//             value={name}\r\n//             onChange={this.handleChange}\r\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//             required\r\n//           />\r\n//         </label>\r\n//         <label className={s.label}>\r\n//           Number\r\n//           <input\r\n//             className={s.input}\r\n//             type=\"tel\"\r\n//             name=\"number\"\r\n//             value={number}\r\n//             onChange={this.handleChange}\r\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//             required\r\n//           />\r\n//         </label>\r\n//         <button type=\"submit\" className={s.button}>\r\n//           Add contact\r\n//         </button>\r\n//       </form>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// ContactForm.propTypes = {\r\n//   contacts: PropTypes.arrayOf(\r\n//     PropTypes.shape({\r\n//       name: PropTypes.string.isRequired,\r\n//       number: PropTypes.number.isRequired,\r\n//     }),\r\n//   )\r\n// };\r\n\r\nexport default ContactForm;\r\n","import PropTypes from 'prop-types';\r\nimport s from './ContactList.module.css';\r\n\r\nexport default function ContactList({ contacts, onDeleteContact }) {\r\n  return (\r\n    <ul className={s.contactList}>\r\n      {contacts.map(({ name, number, id }) => (\r\n        <li className={s.name} key={id}>\r\n          {name}: <span className={s.number}>{number}</span>\r\n          <button\r\n            type=\"button\"\r\n            className={s.button}\r\n            onClick={() => onDeleteContact(id)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n};\r\n","import React from 'react';\r\nimport s from './Filter.module.css';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <label className={s.label}>\r\n    Find contacts by name\r\n    <input type=\"text\" value={value} onChange={onChange} className={s.input} />\r\n  </label>\r\n);\r\n\r\nexport default Filter;\r\n","import { useState } from 'react';\nimport useLocalStorage from 'hooks/useLocalStorage';\nimport Container from 'components/Container/Container';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction App() {\n  const [contacts, setContacts] = useLocalStorage('contacts');\n\n  const [filter, setFilter] = useState('');\n\n  const addContact = ({ name, number }) => {\n    const data = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n\n    const nameNormalize = name.toLowerCase();\n    const checkedName = contacts.find(\n      contact => nameNormalize === contact.name.toLowerCase(),\n    );\n\n    checkedName\n      ? alert(`${name} is already in contacts!`)\n      : setContacts(contacts => [...contacts, data]);\n  };\n\n  const deleteContact = contactId => {\n    setContacts(contacts =>\n      contacts.filter(contact => contact.id !== contactId),\n    );\n  };\n\n  const changeFilter = e => {\n    setFilter(e.currentTarget.value);\n  };\n\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  const visibleContacts = getVisibleContacts();\n\n  return (\n    <Container>\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm onSubmit={addContact} />\n\n        <h2>Contacts</h2>\n        <Filter value={filter} onChange={changeFilter} />\n        <ContactList\n          contacts={visibleContacts}\n          onDeleteContact={deleteContact}\n        />\n      </div>\n    </Container>\n  );\n}\n\nexport default App;\n\n// class App extends Component {\n//   state = {\n//     contacts: [\n//       { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//       { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//       { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//       { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n//     ],\n//     filter: '',\n//   };\n\n//   componentDidMount() {\n//     const savedContacts = localStorage.getItem('contacts');\n//     const parcedContacts = JSON.parse(savedContacts);\n//     if(parcedContacts) {\n//       this.setState({contacts: parcedContacts});\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if(this.state.contacts !== prevState.contacts) {\n//       localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n//     }\n//   }\n\n//   formSubmitHandler = data => {\n//     console.log(data);\n//   };\n\n// addContact = ({name, number}) => {\n//     const data = {\n//       id: uuidv4(),\n//       name,\n//       number,\n//     };\n//    const {contacts} = this.state;\n//    const nameNormalize = name.toLowerCase();\n\n//   const checkedName = contacts.find(contact => nameNormalize===contact.name.toLowerCase());\n\n//   checkedName ? (\n//     alert (`${name} is already in contacts!`)\n//    ) : (\n//     this.setState(({contacts}) => ({\n//       contacts: [...contacts, data],\n//     }))\n//    )\n//   };\n\n//   deleteContact = contactId => {\n//     this.setState(prevState => ({\n//       contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n//     }));\n//   };\n\n//   changeFilter =(e) => {\n//     this.setState({filter: e.currentTarget.value});\n//   };\n\n//   getVisibleContacts = ()=> {\n//     const {contacts, filter} = this.state;\n//     const normalizedFilter = filter.toLowerCase();\n\n//     return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n//   }\n\n//   render() {\n//     const {filter} = this.state;\n//     const visibleContacts = this.getVisibleContacts();\n\n//     return (\n//       <Container>\n//         <div>\n//           <h1>Phonebook</h1>\n//           <ContactForm\n//           onSubmit={this.addContact}\n//           />\n\n//           <h2>Contacts</h2>\n//           <Filter value={filter} onChange={this.changeFilter}/>\n//           <ContactList\n//             contacts={visibleContacts}\n//             onDeleteContact={this.deleteContact}\n//           />\n//         </div>\n//       </Container>\n//     );\n//   }\n// }\n\n// export default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__wm42t\",\"label\":\"ContactForm_label__TqI3V\",\"input\":\"ContactForm_input__3T5Tp\",\"button\":\"ContactForm_button__3nHux\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__SQ2mz\",\"name\":\"ContactList_name__11vQT\",\"number\":\"ContactList_number__3G2AP\",\"button\":\"ContactList_button__3l1R7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__6I1nZ\",\"input\":\"Filter_input__1-Xr3\"};"],"sourceRoot":""}